package com.example.botforconsultations.api.bot;

import com.example.botforconsultations.core.model.Consultation;
import com.example.botforconsultations.core.model.Role;
import com.example.botforconsultations.core.model.TelegramUser;
import com.example.botforconsultations.core.repository.ConsultationRepository;
import com.example.botforconsultations.core.repository.TelegramUserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class StudentCommandHandler {

    private final TelegramUserRepository telegramUserRepository;
    private final ConsultationRepository consultationRepository;
    private final BotMessenger botMessenger;

    private final Map<Long, UserState> userStates = new HashMap<>();

    private enum UserState {
        WAITING_FOR_TEACHER_NAME,
        DEFAULT
    }

    public void handleStudentCommand(String text, Long chatId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        UserState currentState = userStates.getOrDefault(chatId, UserState.DEFAULT);
        if (currentState == UserState.WAITING_FOR_TEACHER_NAME) {
            processTeacherSearch(text, chatId);
            userStates.put(chatId, UserState.DEFAULT);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤—ã–±–æ—Ä–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        if (text.startsWith("üë®‚Äçüè´")) {
            showTeacherConsultations(text, chatId);
            return;
        }

        switch (text) {
            case "–ü–æ–º–æ—â—å" -> sendHelp(chatId);

            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
            case "üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏" -> handleTeachers(chatId);
//            case "üîî –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" -> handleSubscriptions(chatId);
//            case "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏" -> handleMyRegistrations(chatId);
//            case "‚ùì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" -> handleRequestConsultation(chatId);
//            case "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã" -> handleViewRequests(chatId);

            // –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é 'üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏'
            case "üë• –í—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏" -> handleAllTeachers(chatId);
            case "üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" -> handleTeacherSearch(chatId);


            case "‚óÄÔ∏è –ù–∞–∑–∞–¥" -> sendMainMenu(chatId);

//            case "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" -> handleSubscribeToTeacher(chatId);

            default -> botMessenger.sendText(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                    chatId
            );
        }
    }

    public void sendHelp(Long chatId) {
        StringBuilder helpText = new StringBuilder();
        helpText.append("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:\n\n")
                .append("üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n")
                .append("üîî –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n")
                .append("üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n")
                .append("‚ùì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n")
                .append("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n")
                .append("–í —Ä–∞–∑–¥–µ–ª–µ \"üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏\" –º–æ–∂–Ω–æ:\n")
                .append("- üë• –í—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
                .append("- üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –∏–º–µ–Ω–∏.")
                .append("- –ü–æ—Å–ª–µ 'üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
                .append("–í —Ä–∞–∑–¥–µ–ª–µ \"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã\" –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é(—Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é).\n");

        botMessenger.sendText(helpText.toString(), chatId);
    }

    public void sendMainMenu(Long chatId) {
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        KeyboardRow row2 = new KeyboardRow();
        KeyboardRow row3 = new KeyboardRow();
        KeyboardRow helpRow = new KeyboardRow();

        helpRow.add(new KeyboardButton("–ü–æ–º–æ—â—å"));
        row1.add(new KeyboardButton("üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"));
        row2.add(new KeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"));
        row2.add(new KeyboardButton("üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏"));
        row3.add(new KeyboardButton("‚ùì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"));
        row3.add(new KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(helpRow);

        botMessenger.execute(
                SendMessage.builder()
                        .text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—É–¥–µ–Ω—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                        .chatId(chatId)
                        .replyMarkup(
                                ReplyKeyboardMarkup.builder()
                                        .keyboard(keyboard)
                                        .resizeKeyboard(true)
                                        .build()
                        )
                        .build()
        );
    }


    // –ú–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    private void handleTeachers(Long chatId) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üë• –í—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"));
        row1.add(new KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"));
        keyboard.add(row1);

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        ReplyKeyboardMarkup keyboardMarkup = ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();

        SendMessage message = SendMessage.builder()
                .text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏:")
                .chatId(chatId)
                .replyMarkup(keyboardMarkup)
                .build();

        botMessenger.execute(message);
    }

    private void handleTeacherSearch(Long chatId) {
        userStates.put(chatId, UserState.WAITING_FOR_TEACHER_NAME);
        botMessenger.sendText(
                "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é) –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                chatId
        );
    }

    private void handleAllTeachers(Long chatId) {
        List<TelegramUser> teachers = telegramUserRepository.findByRoleAndHasConfirmed(Role.TEACHER, true);

        if (teachers.isEmpty()) {
            botMessenger.sendText("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", chatId);
            return;
        }

        StringBuilder message = new StringBuilder("–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n");
        for (TelegramUser teacher : teachers) {
            message.append(String.format("üë®‚Äçüè´ %s %s\n",
                    teacher.getFirstName(),
                    teacher.getLastName() != null ? teacher.getLastName() : ""));
        }

        userStates.put(chatId, UserState.WAITING_FOR_TEACHER_NAME);
        message.append("\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:");

        botMessenger.sendText(message.toString(), chatId);
    }

    private void processTeacherSearch(String searchQuery, Long chatId) {
        // –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä)
        List<TelegramUser> foundTeachers = telegramUserRepository
                .findByRoleAndHasConfirmedTrueAndFirstNameContainingIgnoreCaseOrLastNameContainingIgnoreCase(
                        Role.TEACHER, searchQuery, searchQuery);

        if (foundTeachers.isEmpty()) {
            botMessenger.sendText(
                    "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
                    chatId
            );
            return;
        }

        StringBuilder message = new StringBuilder("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n\n");
        for (TelegramUser teacher : foundTeachers) {
            message.append(String.format("üë®‚Äçüè´ %s %s\n",
                    teacher.getFirstName(),
                    teacher.getLastName() != null ? teacher.getLastName() : ""));
        }
        message.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.");

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
        List<KeyboardRow> keyboard = new ArrayList<>();
        for (TelegramUser teacher : foundTeachers) {
            KeyboardRow row = new KeyboardRow();
            String teacherName = String.format("üë®‚Äçüè´ %s %s",
                    teacher.getFirstName(),
                    teacher.getLastName() != null ? teacher.getLastName() : "");
            row.add(new KeyboardButton(teacherName));
            keyboard.add(row);
        }


        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        ReplyKeyboardMarkup keyboardMarkup = ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();

        SendMessage searchResults = SendMessage.builder()
                .text(message.toString())
                .chatId(chatId)
                .replyMarkup(keyboardMarkup)
                .build();

        botMessenger.execute(searchResults);
    }



    private void showTeacherConsultations(String teacherButton, Long chatId) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        String teacherName = teacherButton.substring(teacherButton.indexOf(" ") + 1);
        String[] nameParts = teacherName.split(" ");

        // –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        TelegramUser teacher;
        if (nameParts.length > 1) {
            teacher = telegramUserRepository.findByFirstNameAndLastNameAndRole(
                    nameParts[0], nameParts[1], Role.TEACHER).orElse(null);
        } else {
            teacher = telegramUserRepository.findByFirstNameAndRole(
                    nameParts[0], Role.TEACHER).orElse(null);
        }

        if (teacher == null) {
            botMessenger.sendText("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", chatId);
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        List<Consultation> consultations = consultationRepository.findByTeacherOrderByStartTimeAsc(teacher);

        StringBuilder message = new StringBuilder();
        message.append(String.format("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è %s:\n\n", teacherName));

        if (consultations.isEmpty()) {
            message.append("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n");
        } else {
            for (Consultation consultation : consultations) {
                message.append(String.format("‚Ññ%d\n", consultation.getId()));
                message.append(String.format("üìÖ %s - %s\n",
                        consultation.getStartTime().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")),
                        consultation.getEndTime().format(DateTimeFormatter.ofPattern("HH:mm"))));

                if (consultation.getTitle() != null && !consultation.getTitle().isEmpty()) {
                    message.append(String.format("üìù %s\n", consultation.getTitle()));
                }
                message.append("\n");
            }
        }

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow actionRow = new KeyboardRow();
        actionRow.add(new KeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"));
        actionRow.add(new KeyboardButton("‚ùì –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å"));
        keyboard.add(actionRow);

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        ReplyKeyboardMarkup keyboardMarkup = ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();

        SendMessage consultationsMessage = SendMessage.builder()
                .text(message.toString())
                .chatId(chatId)
                .replyMarkup(keyboardMarkup)
                .build();

        botMessenger.execute(consultationsMessage);
    }
}



package com.example.botforconsultations.api.bot;

import com.example.botforconsultations.api.bot.service.ConsultationRequestService;
import com.example.botforconsultations.api.bot.service.ConsultationService;
import com.example.botforconsultations.api.bot.service.NotificationService;
import com.example.botforconsultations.api.bot.service.StudentServiceBot;
import com.example.botforconsultations.api.bot.service.TeacherConsultationService;
import com.example.botforconsultations.api.bot.service.TeacherSearchService;
import com.example.botforconsultations.api.bot.state.StudentStateManager;
import com.example.botforconsultations.api.bot.state.StudentStateManager.UserState;
import com.example.botforconsultations.api.bot.utils.ConsultationMessageFormatter;
import com.example.botforconsultations.api.bot.utils.StudentKeyboardBuilder;
import com.example.botforconsultations.api.bot.utils.TeacherNameFormatter;
import com.example.botforconsultations.core.model.Consultation;
import com.example.botforconsultations.core.model.StudentConsultation;
import com.example.botforconsultations.core.model.Subscription;
import com.example.botforconsultations.core.model.TelegramUser;
import com.example.botforconsultations.core.repository.TelegramUserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

import java.util.List;

/**
 * –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Service Layer –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class StudentCommandHandler {

    // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    private final TelegramUserRepository telegramUserRepository;
    
    // –°–µ—Ä–≤–∏—Å—ã
    private final TeacherSearchService teacherSearchService;
    private final ConsultationService consultationService;
    private final ConsultationRequestService consultationRequestService;
    private final StudentServiceBot studentServiceBot;
    private final TeacherConsultationService teacherConsultationService;
    private final NotificationService notificationService;
    private final BotMessenger botMessenger;
    
    // –£—Ç–∏–ª–∏—Ç—ã
    private final StudentStateManager stateManager;
    private final StudentKeyboardBuilder keyboardBuilder;
    private final ConsultationMessageFormatter messageFormatter;

    /**
     * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞
     */
    public void handleStudentCommand(String text, Long chatId) {
        UserState currentState = stateManager.getState(chatId);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
        if (currentState == UserState.WAITING_FOR_TEACHER_NAME) {
            processTeacherSearch(text, chatId);
            return;
        }

        if (currentState == UserState.WAITING_FOR_CONSULTATION_MESSAGE) {
            processConsultationRegistration(text, chatId);
            return;
        }

        if (currentState == UserState.WAITING_FOR_REQUEST_TITLE) {
            processRequestCreation(text, chatId);
            return;
        }

        if (currentState == UserState.WAITING_FOR_REQUEST_MESSAGE) {
            processRequestRegistration(text, chatId);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∫–Ω–æ–ø–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç–º–æ–¥–∑–∏)
        if (text.startsWith("üë®‚Äçüè´")) {
            handleTeacherSelection(text, chatId);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏/–∑–∞–ø—Ä–æ—Å–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if (text.startsWith("‚Ññ")) {
            handleNumberSelection(text, chatId);
            return;
        }

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        switch (text) {
            case "–ü–æ–º–æ—â—å" -> sendHelp(chatId);
            case "üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏" -> sendTeachersMenu(chatId);
            case "üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏" -> showMyRegistrations(chatId);
            case "üîî –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" -> showMySubscriptions(chatId);
            
            // –ó–∞–ø—Ä–æ—Å—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            case "‚ùì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" -> startRequestCreation(chatId);
            case "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã" -> showMyRequests(chatId);
            
            // –ú–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            case "üë• –í—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏" -> showAllTeachers(chatId);
            case "üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" -> startTeacherSearch(chatId);
            
            // –§–∏–ª—å—Ç—Ä—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            case "üìÖ –í—Å–µ" -> applyConsultationFilter(chatId, "all");
            case "‚è≠Ô∏è –ë—É–¥—É—â–∏–µ" -> applyConsultationFilter(chatId, "future");
            case "‚èÆÔ∏è –ü—Ä–æ—à–µ–¥—à–∏–µ" -> applyConsultationFilter(chatId, "past");
            
            // –ü–æ–¥–ø–∏—Å–∫–∏
            case "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" -> handleSubscribe(chatId);
            case "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è" -> handleUnsubscribe(chatId);
            
            // –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π
            case "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è" -> startConsultationRegistration(chatId);
            case "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å" -> handleCancelRegistration(chatId);
            
            // –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            case "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–ø—Ä–æ—Å" -> startRequestRegistration(chatId);
            case "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∑–∞–ø—Ä–æ—Å–∞" -> handleRequestUnregistration(chatId);
            
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è
            case "üîô –ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º" -> sendTeachersMenu(chatId);
            case "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" -> backToConsultationsList(chatId);
            case "‚óÄÔ∏è –ù–∞–∑–∞–¥" -> sendMainMenu(chatId);
            
            default -> botMessenger.sendText(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                    chatId
            );
        }
    }

    // ========== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–ø—Ä–∞–≤–∫–∞ ==========

    public void sendMainMenu(Long chatId) {
        stateManager.resetState(chatId);
        botMessenger.execute(SendMessage.builder()
                .text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—É–¥–µ–Ω—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                .chatId(chatId)
                .replyMarkup(keyboardBuilder.buildMainMenu())
                .build());
    }

    public void sendHelp(Long chatId) {
        String helpText = """
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:
                
                üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                üîî –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                ‚ùì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                
                –í —Ä–∞–∑–¥–µ–ª–µ "üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏" –º–æ–∂–Ω–æ:
                - üë• –í—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                - üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - –ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –∏–º–µ–Ω–∏.
                - –ü–æ—Å–ª–µ 'üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                –í —Ä–∞–∑–¥–µ–ª–µ "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã" –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é(—Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é).
                """;
        botMessenger.sendText(helpText, chatId);
    }

    // ========== –†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ ==========

    private void sendTeachersMenu(Long chatId) {
        botMessenger.execute(SendMessage.builder()
                .text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏:")
                .chatId(chatId)
                .replyMarkup(keyboardBuilder.buildTeachersMenu())
                .build());
    }

    private void showAllTeachers(Long chatId) {
        List<TelegramUser> teachers = teacherSearchService.getAllTeachers();

        if (teachers.isEmpty()) {
            botMessenger.sendText("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", chatId);
            return;
        }

        StringBuilder message = new StringBuilder("–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n");
        for (TelegramUser teacher : teachers) {
            message.append(TeacherNameFormatter.formatFullName(teacher)).append("\n");
        }
        message.append("\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:");

        stateManager.setState(chatId, UserState.WAITING_FOR_TEACHER_NAME);
        botMessenger.sendText(message.toString(), chatId);
    }

    private void startTeacherSearch(Long chatId) {
        stateManager.setState(chatId, UserState.WAITING_FOR_TEACHER_NAME);
        botMessenger.sendText(
                "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é) –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                chatId
        );
    }

    private void processTeacherSearch(String searchQuery, Long chatId) {
        stateManager.resetState(chatId);
        
        List<TelegramUser> teachers = teacherSearchService.searchTeachers(searchQuery);

        if (teachers.isEmpty()) {
            botMessenger.sendText(
                    "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
                    chatId
            );
            return;
        }

        StringBuilder message = new StringBuilder("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n\n");
        for (TelegramUser teacher : teachers) {
            message.append(TeacherNameFormatter.formatFullName(teacher)).append("\n");
        }
        message.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.");

        botMessenger.execute(SendMessage.builder()
                .text(message.toString())
                .chatId(chatId)
                .replyMarkup(keyboardBuilder.buildTeacherSearchResults(teachers))
                .build());
    }

    private void handleTeacherSelection(String teacherButton, Long chatId) {
        String[] nameParts = TeacherNameFormatter.extractNameParts(teacherButton);
        TelegramUser teacher = teacherSearchService.findByNameParts(nameParts);

        if (teacher == null) {
            botMessenger.sendText("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", chatId);
            return;
        }

        stateManager.setCurrentTeacher(chatId, teacher.getId());
        stateManager.setFilter(chatId, "future");
        showTeacherConsultations(chatId, teacher);
    }

    private void showTeacherConsultations(Long chatId, TelegramUser teacher) {
        String filter = stateManager.getFilter(chatId);
        List<Consultation> consultations = consultationService.getTeacherConsultations(teacher, filter);
        boolean isSubscribed = checkSubscription(chatId, teacher);

        String messageText = messageFormatter.formatConsultationsList(teacher, consultations, filter);
        
        botMessenger.execute(SendMessage.builder()
                .text(messageText)
                .chatId(chatId)
                .replyMarkup(keyboardBuilder.buildTeacherConsultations(consultations, isSubscribed))
                .build());
    }

    private void applyConsultationFilter(Long chatId, String filter) {
        TelegramUser teacher = getCurrentTeacherWithValidation(chatId);
        if (teacher == null) return;

        stateManager.setFilter(chatId, filter);
        showTeacherConsultations(chatId, teacher);
    }

    // ========== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ ==========

    private void handleSubscribe(Long chatId) {
        handleSubscriptionAction(chatId, true);
    }

    private void handleUnsubscribe(Long chatId) {
        handleSubscriptionAction(chatId, false);
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
     * @param isSubscribe true - –ø–æ–¥–ø–∏—Å–∫–∞, false - –æ—Ç–ø–∏—Å–∫–∞
     */
    private void handleSubscriptionAction(Long chatId, boolean isSubscribe) {
        TelegramUser teacher = getCurrentTeacherWithValidation(chatId);
        if (teacher == null) return;

        TelegramUser student = getCurrentStudent(chatId);

        StudentServiceBot.SubscriptionResult result = isSubscribe
                ? studentServiceBot.subscribe(student, teacher)
                : studentServiceBot.unsubscribe(student, teacher);

        if (!result.success()) {
            botMessenger.sendText(result.message(), chatId);
        } else {
            String actionText = isSubscribe ? "–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞" : "–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç";
            botMessenger.sendText(
                    String.format("–í—ã —É—Å–ø–µ—à–Ω–æ %s –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è %s",
                            actionText,
                            TeacherNameFormatter.formatFullName(teacher)),
                    chatId
            );
        }

        showTeacherConsultations(chatId, teacher);
    }

    private void showMySubscriptions(Long chatId) {
        TelegramUser student = getCurrentStudent(chatId);
        List<Subscription> subscriptions = studentServiceBot.getStudentSubscriptions(student);
        String message = messageFormatter.formatSubscriptions(subscriptions);
        botMessenger.sendText(message, chatId);
    }

    // ========== –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏ ==========

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞)
     */
    private void handleNumberSelection(String text, Long chatId) {
        UserState currentState = stateManager.getState(chatId);
        
        try {
            Long id = extractId(text);
            
            // –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            if (currentState == UserState.VIEWING_REQUEST_DETAILS) {
                showRequestDetails(chatId, id);
            } else {
                // –ò–Ω–∞—á–µ - —ç—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
                showConsultationDetails(chatId, id);
            }
        } catch (Exception e) {
            log.error("Error parsing ID from '{}': {}", text, e.getMessage());
            botMessenger.sendText(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: ‚Ññ123",
                    chatId
            );
        }
    }

    private Long extractId(String text) {
        // –§–æ—Ä–º–∞—Ç: "‚Ññ123" –∏–ª–∏ "‚Ññ123 - 15.10 14:00" –∏–ª–∏ "‚Ññ123 - –ù–∞–∑–≤–∞–Ω–∏–µ"
        String idStr = text.contains(" ") 
                ? text.substring(1, text.indexOf(" ")) 
                : text.substring(1);
        return Long.parseLong(idStr);
    }

    private void showConsultationDetails(Long chatId, Long consultationId) {
        Consultation consultation = consultationService.findById(consultationId);
        if (consultation == null) {
            botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId);
            return;
        }

        stateManager.setCurrentConsultation(chatId, consultationId);
        stateManager.setState(chatId, UserState.VIEWING_CONSULTATION_DETAILS);

        TelegramUser student = getCurrentStudent(chatId);
        long registeredCount = studentServiceBot.getRegisteredCount(consultation);
        boolean isRegistered = studentServiceBot.isRegistered(student, consultation);

        String messageText = messageFormatter.formatConsultationDetails(consultation, registeredCount);

        botMessenger.execute(SendMessage.builder()
                .text(messageText)
                .chatId(chatId)
                .replyMarkup(keyboardBuilder.buildConsultationDetails(isRegistered))
                .build());
    }

    private void backToConsultationsList(Long chatId) {
        UserState currentState = stateManager.getState(chatId);
        
        // –ï—Å–ª–∏ –±—ã–ª–∏ –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø—Ä–æ—Å–æ–≤ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
        if (currentState == UserState.VIEWING_REQUEST_DETAILS) {
            showMyRequests(chatId);
            return;
        }
        
        // –ò–Ω–∞—á–µ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        Long teacherId = stateManager.getCurrentTeacher(chatId);
        if (teacherId == null) {
            sendMainMenu(chatId);
            return;
        }

        TelegramUser teacher = teacherSearchService.findById(teacherId);
        if (teacher == null) {
            sendMainMenu(chatId);
            return;
        }

        showTeacherConsultations(chatId, teacher);
    }

    // ========== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ==========

    private void startConsultationRegistration(Long chatId) {
        Consultation consultation = getCurrentConsultationWithValidation(chatId);
        if (consultation == null) return;

        TelegramUser student = getCurrentStudent(chatId);
        long registeredCount = studentServiceBot.getRegisteredCount(consultation);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω?
        if (studentServiceBot.isRegistered(student, consultation)) {
            botMessenger.sendText("–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", chatId);
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—Å—Ç–∞—Ç—É—Å, –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        ConsultationService.ValidationResult validation = 
                consultationService.validateForRegistration(consultation, registeredCount);
        
        if (!validation.isValid()) {
            botMessenger.sendText(validation.errorMessage(), chatId);
            return;
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º—É/–≤–æ–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
        stateManager.setState(chatId, UserState.WAITING_FOR_CONSULTATION_MESSAGE);
        botMessenger.sendText(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:\n\n" +
                "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–†–∞–∑–±–æ—Ä —Ç–µ–º—ã '–†–µ–∫—É—Ä—Å–∏—è'\" –∏–ª–∏ \"–ü–æ–º–æ—â—å —Å –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç–æ–π\"",
                chatId
        );
    }

    private void processConsultationRegistration(String message, Long chatId) {
        Consultation consultation = getCurrentConsultationWithValidation(chatId);
        if (consultation == null) {
            stateManager.resetState(chatId);
            return;
        }

        TelegramUser student = getCurrentStudent(chatId);
        StudentServiceBot.RegistrationResult result = studentServiceBot.register(student, consultation, message);

        stateManager.resetState(chatId);

        if (!result.success()) {
            botMessenger.sendText(result.message(), chatId);
        } else {
            long registeredCount = studentServiceBot.getRegisteredCount(consultation);
            String confirmMessage = messageFormatter.formatRegistrationConfirmation(
                    consultation, message, registeredCount);
            botMessenger.sendText(confirmMessage, chatId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ
            teacherConsultationService.checkAndAutoClose(consultation);
        }

        showConsultationDetails(chatId, consultation.getId());
    }

    private void handleCancelRegistration(Long chatId) {
        Consultation consultation = getCurrentConsultationWithValidation(chatId);
        if (consultation == null) return;

        TelegramUser student = getCurrentStudent(chatId);
        
        // –°—á–∏—Ç–∞–µ–º –¥–æ –æ—Ç–º–µ–Ω—ã
        long countBefore = studentServiceBot.getRegisteredCount(consultation);
        
        StudentServiceBot.RegistrationResult result = studentServiceBot.cancelRegistration(student, consultation);

        if (!result.success()) {
            botMessenger.sendText(result.message(), chatId);
        } else {
            String confirmMessage = messageFormatter.formatCancellationConfirmation(consultation);
            botMessenger.sendText(confirmMessage, chatId);
            
            // –°—á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
            long countAfter = studentServiceBot.getRegisteredCount(consultation);
            
            // –ï—Å–ª–∏ –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            if (countAfter < countBefore) {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞)
                notificationService.notifySubscribersAvailableSpots(consultation, student.getId());
            }
        }

        showConsultationDetails(chatId, consultation.getId());
    }

    private void showMyRegistrations(Long chatId) {
        TelegramUser student = getCurrentStudent(chatId);
        List<StudentConsultation> registrations = studentServiceBot.getStudentRegistrations(student);
        String message = messageFormatter.formatStudentRegistrations(registrations);
        botMessenger.sendText(message, chatId);
    }

    // ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ==========

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ chatId
     * –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–µ—Ä–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç.–∫. UpdateConsumer –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
     */
    private TelegramUser getCurrentStudent(Long chatId) {
        return telegramUserRepository.findByTelegramId(chatId).orElseThrow();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
     * @return –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    private TelegramUser getCurrentTeacherWithValidation(Long chatId) {
        Long teacherId = stateManager.getCurrentTeacher(chatId);
        if (teacherId == null) {
            botMessenger.sendText("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", chatId);
            return null;
        }
        
        TelegramUser teacher = teacherSearchService.findById(teacherId);
        if (teacher == null) {
            botMessenger.sendText("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", chatId);
            return null;
        }
        
        return teacher;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
     * @return –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     */
    private Consultation getCurrentConsultationWithValidation(Long chatId) {
        Long consultationId = stateManager.getCurrentConsultation(chatId);
        if (consultationId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
            return null;
        }
        
        Consultation consultation = consultationService.findById(consultationId);
        if (consultation == null) {
            botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId);
            return null;
        }
        
        return consultation;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
     */
    private boolean checkSubscription(Long chatId, TelegramUser teacher) {
        TelegramUser student = getCurrentStudent(chatId);
        return studentServiceBot.isSubscribed(student, teacher);
    }

    // ========== –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π ==========

    /**
     * –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
     */
    private void startRequestCreation(Long chatId) {
        stateManager.setState(chatId, UserState.WAITING_FOR_REQUEST_TITLE);
        botMessenger.sendText(
                "‚ùì –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n" +
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—É–∂–Ω–∞.\n" +
                "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ü–æ–º–æ—â—å —Å –∫—É—Ä—Å–æ–≤–æ–π —Ä–∞–±–æ—Ç–æ–π –ø–æ Java\" –∏–ª–∏ \"–†–∞–∑–±–æ—Ä —Ç–µ–º—ã –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å\"\n\n" +
                "–í–∞—à –∑–∞–ø—Ä–æ—Å —É–≤–∏–¥—è—Ç –≤—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, –∏ –∫—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—Ö —Å–º–æ–∂–µ—Ç –µ–≥–æ –ø—Ä–∏–Ω—è—Ç—å.",
                chatId
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–º—ã)
     */
    private void processRequestCreation(String title, Long chatId) {
        if (title == null || title.trim().isEmpty()) {
            botMessenger.sendText("–¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", chatId);
            return;
        }

        if (title.length() > 200) {
            botMessenger.sendText(
                    "–¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:",
                    chatId
            );
            return;
        }

        TelegramUser student = getCurrentStudent(chatId);
        Consultation request = consultationRequestService.createRequest(student, title.trim());
        
        stateManager.resetState(chatId);
        
        String message = messageFormatter.formatRequestCreationConfirmation(request);
        botMessenger.execute(SendMessage.builder()
                .chatId(chatId)
                .text(message)
                .replyMarkup(keyboardBuilder.buildMainMenu())
                .build());
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π (–æ—Ç –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)
     */
    private void showMyRequests(Long chatId) {
        List<Consultation> requests = consultationRequestService.getAllRequests();
        
        String message = messageFormatter.formatRequestsList(requests);
        
        if (requests.isEmpty()) {
            botMessenger.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(message)
                    .replyMarkup(keyboardBuilder.buildMainMenu())
                    .build());
        } else {
            stateManager.setState(chatId, UserState.VIEWING_REQUEST_DETAILS);
            botMessenger.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(message)
                    .replyMarkup(keyboardBuilder.buildRequestsList(requests))
                    .build());
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     */
    private void showRequestDetails(Long chatId, Long requestId) {
        consultationRequestService.findRequestById(requestId).ifPresentOrElse(
                request -> {
                    stateManager.setCurrentRequest(chatId, requestId);
                    TelegramUser student = getCurrentStudent(chatId);
                    boolean isRegistered = consultationRequestService.isRegisteredOnRequest(student, request);
                    
                    String message = messageFormatter.formatRequestDetails(request);
                    botMessenger.execute(SendMessage.builder()
                            .chatId(chatId)
                            .text(message)
                            .replyMarkup(keyboardBuilder.buildRequestDetails(isRegistered))
                            .build());
                },
                () -> botMessenger.sendText("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", chatId)
        );
    }

    /**
     * –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∑–∞–ø—Ä–æ—Å (–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
     */
    private void startRequestRegistration(Long chatId) {
        Long requestId = stateManager.getCurrentRequest(chatId);
        if (requestId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω", chatId);
            return;
        }

        stateManager.setState(chatId, UserState.WAITING_FOR_REQUEST_MESSAGE);
        botMessenger.sendText(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å:\n\n" +
                "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —ç—Ç–∞ —Ç–µ–º–∞\" –∏–ª–∏ \"–¢–æ–∂–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å\"",
                chatId
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∑–∞–ø—Ä–æ—Å (–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
     */
    private void processRequestRegistration(String message, Long chatId) {
        Long requestId = stateManager.getCurrentRequest(chatId);
        if (requestId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω", chatId);
            stateManager.resetState(chatId);
            return;
        }

        consultationRequestService.findRequestById(requestId).ifPresentOrElse(
                request -> {
                    TelegramUser student = getCurrentStudent(chatId);
                    ConsultationRequestService.RequestRegistrationResult result = 
                            consultationRequestService.registerOnRequest(student, request, message);
                    
                    stateManager.resetState(chatId);
                    
                    if (!result.success()) {
                        botMessenger.sendText(result.message(), chatId);
                    } else {
                        botMessenger.sendText(
                                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∑–∞–ø—Ä–æ—Å!\n\n" +
                                "–ö–æ–≥–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–∏–º–µ—Ç —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–∑–¥–∞—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, " +
                                "–≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–µ—ë.",
                                chatId
                        );
                    }
                    
                    showRequestDetails(chatId, requestId);
                },
                () -> {
                    botMessenger.sendText("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", chatId);
                    stateManager.resetState(chatId);
                }
        );
    }

    /**
     * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
     */
    private void handleRequestUnregistration(Long chatId) {
        Long requestId = stateManager.getCurrentRequest(chatId);
        if (requestId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω", chatId);
            return;
        }

        consultationRequestService.findRequestById(requestId).ifPresentOrElse(
                request -> {
                    TelegramUser student = getCurrentStudent(chatId);
                    ConsultationRequestService.RequestUnregistrationResult result = 
                            consultationRequestService.unregisterFromRequest(student, request);
                    
                    if (!result.success()) {
                        botMessenger.sendText(result.message(), chatId);
                        showRequestDetails(chatId, requestId);
                    } else {
                        botMessenger.sendText(result.message(), chatId);
                        
                        if (result.requestDeleted()) {
                            // –ó–∞–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω - –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É
                            showMyRequests(chatId);
                        } else {
                            // –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–ª—Å—è - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
                            showRequestDetails(chatId, requestId);
                        }
                    }
                },
                () -> botMessenger.sendText("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", chatId)
        );
    }
}



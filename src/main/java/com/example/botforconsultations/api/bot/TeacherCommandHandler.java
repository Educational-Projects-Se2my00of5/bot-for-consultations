package com.example.botforconsultations.api.bot;

import com.example.botforconsultations.api.bot.service.ConsultationRequestService;
import com.example.botforconsultations.api.bot.service.NotificationService;
import com.example.botforconsultations.api.bot.service.TeacherConsultationService;
import com.example.botforconsultations.api.bot.state.TeacherStateManager;
import com.example.botforconsultations.api.bot.state.TeacherStateManager.TeacherState;
import com.example.botforconsultations.api.bot.utils.TeacherKeyboardBuilder;
import com.example.botforconsultations.api.bot.utils.TeacherMessageFormatter;
import com.example.botforconsultations.core.model.Consultation;
import com.example.botforconsultations.core.model.ConsultationStatus;
import com.example.botforconsultations.core.model.StudentConsultation;
import com.example.botforconsultations.core.model.TelegramUser;
import com.example.botforconsultations.core.repository.ConsultationRepository;
import com.example.botforconsultations.core.repository.TelegramUserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class TeacherCommandHandler {

    // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    private final TelegramUserRepository telegramUserRepository;
    private final ConsultationRepository consultationRepository;

    // –°–µ—Ä–≤–∏—Å—ã
    private final TeacherConsultationService consultationService;
    private final ConsultationRequestService requestService;
    private final NotificationService notificationService;
    private final BotMessenger botMessenger;

    // –£—Ç–∏–ª–∏—Ç—ã
    private final TeacherStateManager stateManager;
    private final TeacherKeyboardBuilder keyboardBuilder;
    private final TeacherMessageFormatter messageFormatter;

    // –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    private static final DateTimeFormatter[] DATE_FORMATTERS = {
            DateTimeFormatter.ofPattern("dd.MM.yyyy"),
            DateTimeFormatter.ofPattern("dd.MM.yy"),
            DateTimeFormatter.ofPattern("dd.MM")
    };
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm");

    /**
     * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
     */
    public void handleTeacherCommand(String text, Long chatId) {
        TeacherState currentState = stateManager.getState(chatId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        if (text.equals("‚ùå –û—Ç–º–µ–Ω–∞")) {
            handleCancel(chatId);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞
        if (currentState != TeacherState.DEFAULT
                && currentState != TeacherState.VIEWING_CONSULTATION_DETAILS
                && currentState != TeacherState.VIEWING_REQUEST_DETAILS) {
            switch (currentState) {
                case WAITING_FOR_CONSULTATION_TITLE -> processConsultationTitle(text, chatId);
                case WAITING_FOR_CONSULTATION_DATETIME -> processConsultationDateTime(text, chatId);
                case WAITING_FOR_CONSULTATION_CAPACITY -> processConsultationCapacity(text, chatId);
                case WAITING_FOR_CONSULTATION_AUTOCLOSE -> processConsultationAutoClose(text, chatId);
                case ACCEPTING_REQUEST_DATETIME -> processAcceptRequestDateTime(text, chatId);
                case ACCEPTING_REQUEST_CAPACITY -> processAcceptRequestCapacity(text, chatId);
                case ACCEPTING_REQUEST_AUTOCLOSE -> processAcceptRequestAutoClose(text, chatId);
                case EDITING_TITLE -> processEditTitle(chatId, text);
                case EDITING_DATETIME -> processEditDateTime(chatId, text);
                case EDITING_CAPACITY -> processEditCapacity(chatId, text);
                case EDITING_AUTOCLOSE -> processEditAutoClose(chatId, text);
                default -> {
                } // –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ —É—Å–ª–æ–≤–∏—è if
            }
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏/–∑–∞–ø—Ä–æ—Å–∞ –ø–æ –Ω–æ–º–µ—Ä—É –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if ((currentState == TeacherState.VIEWING_REQUEST_DETAILS ||
                currentState == TeacherState.VIEWING_CONSULTATION_DETAILS) &&
                text.startsWith("‚Ññ")
        ) {
            handleNumberSelection(text, chatId);
            return;
        }

        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        switch (text) {
            case "–ü–æ–º–æ—â—å" -> sendHelp(chatId);
            case "üìÖ –ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏" -> showMyConsultations(chatId);
            case "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" -> startConsultationCreation(chatId);
            case "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã" -> showStudentRequests(chatId);

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π
            case "üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å" -> handleCloseConsultation(chatId);
            case "üîì –û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å" -> handleOpenConsultation(chatId);
            case "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" -> showEditMenu(chatId);
            case "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" -> handleCancelConsultation(chatId);
            case "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤" -> showRegisteredStudents(chatId);

            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            case "üìã –ù–∞–∑–≤–∞–Ω–∏–µ" -> startEditTitle(chatId);
            case "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è" -> startEditDateTime(chatId);
            case "üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å" -> startEditCapacity(chatId);
            case "üîí –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ" -> startEditAutoClose(chatId);

            // –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
            case "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å" -> startAcceptRequest(chatId);

            // –ù–∞–≤–∏–≥–∞—Ü–∏—è
            case "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É" -> backToList(chatId);
            case "‚óÄÔ∏è –ù–∞–∑–∞–¥" -> handleBackButton(chatId);

            default -> botMessenger.sendText(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                    chatId
            );
        }
    }

    // ========== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–ø—Ä–∞–≤–∫–∞ ==========

    public void sendMainMenu(Long chatId) {
        stateManager.resetState(chatId);
        stateManager.clearCurrentConsultation(chatId);
        stateManager.clearCurrentRequest(chatId);
        botMessenger.execute(SendMessage.builder()
                .text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                .chatId(chatId)
                .replyMarkup(keyboardBuilder.buildMainMenu())
                .build());
    }

    public void sendHelp(Long chatId) {
        String helpText = """
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:
                
                üìÖ –ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏
                ‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
                üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                
                –í —Ä–∞–∑–¥–µ–ª–µ "üìÖ –ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏" –≤—ã –º–æ–∂–µ—Ç–µ:
                - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                - –ó–∞–∫—Ä—ã–≤–∞—Ç—å –∑–∞–ø–∏—Å—å (–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç)
                - –û—Ç–º–µ–Ω—è—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                
                –í —Ä–∞–∑–¥–µ–ª–µ "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã" –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤
                """;
        botMessenger.sendText(helpText, chatId);
    }

    // ========== –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ==========

    private void startConsultationCreation(Long chatId) {
        stateManager.setState(chatId, TeacherState.WAITING_FOR_CONSULTATION_TITLE);
        botMessenger.execute(SendMessage.builder()
                .chatId(chatId)
                .text("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n" +
                        "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n" +
                        "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–†–∞–∑–±–æ—Ä –∫—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç\" –∏–ª–∏ \"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É\"")
                .replyMarkup(keyboardBuilder.buildCancelKeyboard())
                .build());
    }

    private void processConsultationTitle(String title, Long chatId) {
        if (title == null || title.trim().isEmpty()) {
            botMessenger.sendText("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", chatId);
            return;
        }

        if (title.length() > 200) {
            botMessenger.sendText(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å:",
                    chatId
            );
            return;
        }

        stateManager.setTempTitle(chatId, title.trim());
        stateManager.setState(chatId, TeacherState.WAITING_FOR_CONSULTATION_DATETIME);

        botMessenger.sendText(
                "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: \"" + title.trim() + "\"\n\n" +
                        "–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\n\n" +
                        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú-–ß–ß:–ú–ú\n" +
                        "–ü—Ä–∏–º–µ—Ä—ã:\n" +
                        "‚Ä¢ 15.10.2025 14:00-16:00\n" +
                        "‚Ä¢ 20.10 10:00-12:00",
                chatId
        );
    }

    private void processConsultationDateTime(String input, Long chatId) {
        ParsedDateTime parsed = parseDateTimeInput(input);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        if (!validateParsedDateTime(parsed, chatId)) {
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        stateManager.setTempDate(chatId, parsed.date.toString());
        stateManager.setTempStartTime(chatId, parsed.startTime.toString());
        stateManager.setTempEndTime(chatId, parsed.endTime.toString());
        stateManager.setState(chatId, TeacherState.WAITING_FOR_CONSULTATION_CAPACITY);

        botMessenger.sendText(
                String.format("‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: %s %s-%s\n\n",
                        parsed.date.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                        parsed.startTime.format(TIME_FORMATTER),
                        parsed.endTime.format(TIME_FORMATTER)) +
                        "–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)\n\n" +
                        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)\n" +
                        "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
                chatId
        );
    }

    private void processConsultationCapacity(String input, Long chatId) {
        Integer capacity = parseCapacity(input);

        stateManager.setTempCapacity(chatId, capacity);
        stateManager.setState(chatId, TeacherState.WAITING_FOR_CONSULTATION_AUTOCLOSE);

        String capacityText = capacity == null ? "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" : String.valueOf(capacity);

        botMessenger.execute(SendMessage.builder()
                .chatId(chatId)
                .text(String.format("‚úÖ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: %s\n\n", capacityText) +
                        "–®–∞–≥ 4/4: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞?\n\n" +
                        "–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –∑–∞–ø–∏—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.")
                .replyMarkup(keyboardBuilder.buildYesNoKeyboard())
                .build());
    }

    private void processConsultationAutoClose(String answer, Long chatId) {
        boolean autoClose = answer.equalsIgnoreCase("–î–∞");

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        String title = stateManager.getTempTitle(chatId);
        LocalDate date = LocalDate.parse(stateManager.getTempDate(chatId));
        LocalTime startTime = LocalTime.parse(stateManager.getTempStartTime(chatId));
        LocalTime endTime = LocalTime.parse(stateManager.getTempEndTime(chatId));
        Integer capacity = stateManager.getTempCapacity(chatId);

        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        TelegramUser teacher = getCurrentTeacher(chatId);
        Consultation consultation = consultationService.createConsultation(
                teacher, title, date, startTime, endTime, capacity, autoClose
        );

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        stateManager.clearTempConsultationData(chatId);
        stateManager.resetState(chatId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        notificationService.notifySubscribersNewConsultation(consultation.getId());

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        botMessenger.execute(SendMessage.builder()
                .chatId(chatId)
                .text(String.format(
                        "‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n" +
                                "üìã –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Ññ%d\n" +
                                "üìù %s\n" +
                                "üìÖ %s\n" +
                                "üïê %s - %s\n" +
                                "üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: %s\n" +
                                "üîí –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ: %s\n\n" +
                                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º.",
                        consultation.getId(),
                        title,
                        date.format(DateTimeFormatter.ofPattern("dd MMMM yyyy")),
                        startTime.format(TIME_FORMATTER),
                        endTime.format(TIME_FORMATTER),
                        capacity == null ? "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" : capacity,
                        autoClose ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"
                ))
                .replyMarkup(keyboardBuilder.buildMainMenu())
                .build());
    }

    // ========== –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π ==========

    private void showMyConsultations(Long chatId) {
        TelegramUser teacher = getCurrentTeacher(chatId);
        List<Consultation> consultations = consultationService.getTeacherConsultations(teacher);

        String message = messageFormatter.formatConsultationsList(consultations);

        if (consultations.isEmpty()) {
            botMessenger.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(message)
                    .replyMarkup(keyboardBuilder.buildMainMenu())
                    .build());
        } else {
            stateManager.clearCurrentConsultation(chatId);  // –û—á–∏—â–∞–µ–º –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞
            stateManager.setState(chatId, TeacherState.VIEWING_CONSULTATION_DETAILS);
            botMessenger.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(message)
                    .replyMarkup(keyboardBuilder.buildConsultationsList(consultations))
                    .build());
        }
    }

    private void handleNumberSelection(String text, Long chatId) {
        try {
            Long id = extractId(text);
            TeacherState currentState = stateManager.getState(chatId);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º: –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
            if (currentState == TeacherState.VIEWING_REQUEST_DETAILS) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å
                requestService.findRequestById(id).ifPresentOrElse(
                        request -> showRequestDetails(chatId, id),
                        () -> botMessenger.sendText("–ó–∞–ø—Ä–æ—Å ‚Ññ" + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω", chatId)
                );
            } else if (currentState == TeacherState.VIEWING_CONSULTATION_DETAILS) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–Ω–µ –∑–∞–ø—Ä–æ—Å)
                consultationRepository.findById(id).ifPresentOrElse(
                        consultation -> {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏–±–æ –∑–∞–ø—Ä–æ—Å, –ª–∏–±–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
                            if (consultation.getStatus().equals(ConsultationStatus.REQUEST)) {
                                // –≠—Ç–æ –∑–∞–ø—Ä–æ—Å, –∞ –Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
                                botMessenger.sendText("‚Ññ" + id + " —è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç—É–¥–µ–Ω—Ç–∞, –∞ –Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.\n" +
                                        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", chatId);
                            } else {
                                // –≠—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                                showConsultationDetails(chatId, id);
                            }
                        },
                        () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Ññ" + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
                );
            } else {
                botMessenger.sendText("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", chatId);
            }
        } catch (Exception e) {
            log.error("Error parsing ID from '{}': {}", text, e.getMessage());
            botMessenger.sendText("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: ‚Ññ123", chatId);
        }
    }

    private Long extractId(String text) {
        String idStr = text.contains(" ")
                ? text.substring(1, text.indexOf(" "))
                : text.substring(1);
        return Long.parseLong(idStr);
    }

    private void showConsultationDetails(Long chatId, Long consultationId) {
        TelegramUser currentTeacher = getCurrentTeacher(chatId);

        consultationRepository.findById(consultationId).ifPresentOrElse(
                consultation -> {
                    stateManager.setCurrentConsultation(chatId, consultationId);
                    stateManager.setState(chatId, TeacherState.VIEWING_CONSULTATION_DETAILS);

                    long registeredCount = consultation.getRegUsers() != null
                            ? consultation.getRegUsers().size()
                            : 0;
                    String message = messageFormatter.formatConsultationDetails(consultation, registeredCount);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                    boolean isOwner = consultation.getTeacher() != null &&
                            consultation.getTeacher().getId().equals(currentTeacher.getId());

                    if (isOwner) {
                        // –°–≤–æ—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
                        botMessenger.execute(SendMessage.builder()
                                .chatId(chatId)
                                .text(message)
                                .replyMarkup(keyboardBuilder.buildConsultationDetails(consultation, registeredCount))
                                .build());
                    } else {
                        // –ß—É–∂–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
                        botMessenger.execute(SendMessage.builder()
                                .chatId(chatId)
                                .text("‚ö†Ô∏è –≠—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)\n\n" + message)
                                .replyMarkup(keyboardBuilder.buildConsultationDetailsReadOnly(registeredCount))
                                .build());
                    }
                },
                () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
        );
    }

    private void showRegisteredStudents(Long chatId) {
        TeacherState currentState = stateManager.getState(chatId);

        if (currentState == TeacherState.VIEWING_CONSULTATION_DETAILS) {
            Long consultationId = stateManager.getCurrentConsultation(chatId);
            if (consultationId == null) {
                botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
                return;
            }

            consultationRepository.findById(consultationId).ifPresentOrElse(
                    consultation -> {
                        List<StudentConsultation> registrations = consultation.getRegUsers() != null
                                ? List.copyOf(consultation.getRegUsers())
                                : List.of();
                        String message = messageFormatter.formatRegisteredStudents(registrations);

                        botMessenger.execute(SendMessage.builder()
                                .chatId(chatId)
                                .text(message)
                                .replyMarkup(keyboardBuilder.buildBackKeyboard())
                                .build());
                    },
                    () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
            );
        } else if (currentState == TeacherState.VIEWING_REQUEST_DETAILS) {
            Long requestId = stateManager.getCurrentRequest(chatId);
            if (requestId == null) {
                botMessenger.sendText("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω", chatId);
                return;
            }

            showRequestStudents(chatId, requestId);
        } else {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω", chatId);
        }
    }

    // ========== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π ==========

    private void handleCloseConsultation(Long chatId) {
        Long consultationId = stateManager.getCurrentConsultation(chatId);
        if (consultationId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
            return;
        }

        consultationRepository.findById(consultationId).ifPresentOrElse(
                consultation -> {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    if (!isConsultationOwner(consultation, chatId)) {
                        botMessenger.sendText("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", chatId);
                        return;
                    }

                    consultationService.closeConsultation(consultation);
                    botMessenger.sendText("üîí –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∞", chatId);
                    showConsultationDetails(chatId, consultationId);
                },
                () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
        );
    }

    private void handleOpenConsultation(Long chatId) {
        Long consultationId = stateManager.getCurrentConsultation(chatId);
        if (consultationId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
            return;
        }

        consultationRepository.findById(consultationId).ifPresentOrElse(
                consultation -> {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    if (!isConsultationOwner(consultation, chatId)) {
                        botMessenger.sendText("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", chatId);
                        return;
                    }

                    TeacherConsultationService.OpenResult result = consultationService.openConsultation(consultation);

                    if (!result.isSuccess()) {
                        // –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å
                        botMessenger.sendText(result.message(), chatId);
                    } else {
                        botMessenger.sendText("üîì –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∞", chatId);

                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç
                        notificationService.notifySubscribersAvailableSpots(consultation.getId(), null);
                    }

                    showConsultationDetails(chatId, consultationId);
                },
                () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
        );
    }

    private void handleCancelConsultation(Long chatId) {
        Long consultationId = stateManager.getCurrentConsultation(chatId);
        if (consultationId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
            return;
        }

        consultationRepository.findById(consultationId).ifPresentOrElse(
                consultation -> {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    if (!isConsultationOwner(consultation, chatId)) {
                        botMessenger.sendText("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", chatId);
                        return;
                    }

                    consultationService.cancelConsultation(consultation, "–û—Ç–º–µ–Ω–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º");

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                    notificationService.notifyRegisteredStudentsCancellation(consultation.getId());

                    botMessenger.sendText(
                            "‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n" +
                                    "–í—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                            chatId
                    );
                    showConsultationDetails(chatId, consultationId);
                },
                () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
        );
    }

    // ========== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ==========

    private void showEditMenu(Long chatId) {
        Long consultationId = stateManager.getCurrentConsultationId(chatId);
        if (consultationId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
            return;
        }

        consultationRepository.findById(consultationId).ifPresentOrElse(
                consultation -> {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    if (!isConsultationOwner(consultation, chatId)) {
                        botMessenger.sendText("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", chatId);
                        return;
                    }

                    String dateTime = consultation.getDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")) +
                            " " + consultation.getStartTime().format(TIME_FORMATTER) +
                            "-" + consultation.getEndTime().format(TIME_FORMATTER);

                    String capacityText = (consultation.getCapacity() != null && consultation.getCapacity() > 0)
                            ? String.valueOf(consultation.getCapacity())
                            : "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π";

                    String message = "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n" +
                            "üìã –ù–∞–∑–≤–∞–Ω–∏–µ: " + consultation.getTitle() + "\n" +
                            "üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: " + dateTime + "\n" +
                            "üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: " + capacityText + "\n" +
                            "üîí –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ: " + (consultation.isAutoCloseOnCapacity() ? "–í–∫–ª—é—á–µ–Ω–æ" : "–í—ã–∫–ª—é—á–µ–Ω–æ");

                    SendMessage sendMessage = SendMessage.builder()
                            .chatId(chatId)
                            .text(message)
                            .replyMarkup(keyboardBuilder.buildEditMenu())
                            .build();

                    botMessenger.execute(sendMessage);
                },
                () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
        );
    }

    private void startEditTitle(Long chatId) {
        stateManager.setState(chatId, TeacherState.EDITING_TITLE);

        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:")
                .replyMarkup(keyboardBuilder.buildCancelKeyboard())
                .build();

        botMessenger.execute(sendMessage);
    }

    private void processEditTitle(Long chatId, String title) {
        Long consultationId = stateManager.getCurrentConsultationId(chatId);
        if (consultationId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
            return;
        }

        consultationRepository.findById(consultationId).ifPresentOrElse(
                consultation -> {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    if (!isConsultationOwner(consultation, chatId)) {
                        botMessenger.sendText("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", chatId);
                        stateManager.setState(chatId, TeacherState.DEFAULT);
                        return;
                    }

                    consultation.setTitle(title);
                    consultationRepository.save(consultation);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                    notificationService.notifyRegisteredStudentsUpdate(consultation.getId(), "–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏");

                    stateManager.setState(chatId, TeacherState.DEFAULT);
                    botMessenger.sendText("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ", chatId);
                    showConsultationDetails(chatId, consultationId);
                },
                () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
        );
    }

    private void startEditDateTime(Long chatId) {
        stateManager.setState(chatId, TeacherState.EDITING_DATETIME);

        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
                        "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú-–ß–ß:–ú–ú\n\n" +
                        "–ü—Ä–∏–º–µ—Ä—ã:\n" +
                        "25.12.2024 15:30-17:00\n" +
                        "25.12.24 15:30-17:00\n" +
                        "25.12 15:30-17:00")
                .replyMarkup(keyboardBuilder.buildCancelKeyboard())
                .build();

        botMessenger.execute(sendMessage);
    }

    private void processEditDateTime(Long chatId, String dateTimeInput) {
        Long consultationId = stateManager.getCurrentConsultationId(chatId);
        if (consultationId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
            return;
        }

        ParsedDateTime parsed = parseDateTimeInput(dateTimeInput);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        if (!validateParsedDateTime(parsed, chatId)) {
            return;
        }

        consultationRepository.findById(consultationId).ifPresentOrElse(
                consultation -> {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    if (!isConsultationOwner(consultation, chatId)) {
                        botMessenger.sendText("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", chatId);
                        stateManager.setState(chatId, TeacherState.DEFAULT);
                        return;
                    }

                    consultation.setDate(parsed.date());
                    consultation.setStartTime(parsed.startTime());
                    consultation.setEndTime(parsed.endTime());
                    consultationRepository.save(consultation);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                    notificationService.notifyRegisteredStudentsUpdate(consultation.getId(), "–ò–∑–º–µ–Ω–µ–Ω—ã –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏");

                    stateManager.setState(chatId, TeacherState.DEFAULT);
                    botMessenger.sendText("‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω—ã", chatId);
                    showConsultationDetails(chatId, consultationId);
                },
                () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
        );
    }

    private void startEditCapacity(Long chatId) {
        stateManager.setState(chatId, TeacherState.EDITING_CAPACITY);

        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:\n\n" +
                        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)\n" +
                        "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
                .replyMarkup(keyboardBuilder.buildCancelKeyboard())
                .build();

        botMessenger.execute(sendMessage);
    }

    private void processEditCapacity(Long chatId, String capacityInput) {
        Long consultationId = stateManager.getCurrentConsultationId(chatId);
        if (consultationId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
            return;
        }

        Integer capacity = parseCapacity(capacityInput);

        consultationRepository.findById(consultationId).ifPresentOrElse(
                consultation -> {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    if (!isConsultationOwner(consultation, chatId)) {
                        botMessenger.sendText("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", chatId);
                        stateManager.setState(chatId, TeacherState.DEFAULT);
                        return;
                    }

                    int registeredCount = consultation.getRegUsers() != null
                            ? consultation.getRegUsers().size()
                            : 0;

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                    if (capacity != null && capacity < registeredCount) {
                        botMessenger.sendText(
                                "‚ùå –ù–æ–≤–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (" + capacity + ") –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ " +
                                        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (" + registeredCount + ")",
                                chatId
                        );
                        return;
                    }

                    Integer oldCapacity = consultation.getCapacity();
                    consultation.setCapacity(capacity);
                    consultationRepository.save(consultation);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                    // notificationService.notifyRegisteredStudentsUpdate(consultation, "–ò–∑–º–µ–Ω–µ–Ω–∞ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏");

                    // –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    if (capacity != null && (oldCapacity == null || capacity > oldCapacity) && registeredCount < capacity) {
                        notificationService.notifySubscribersAvailableSpots(consultation.getId(), null);
                    }

                    stateManager.setState(chatId, TeacherState.DEFAULT);

                    String capacityText = capacity == null ? "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" : String.valueOf(capacity);
                    botMessenger.sendText("‚úÖ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: " + capacityText, chatId);
                    showConsultationDetails(chatId, consultationId);
                },
                () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
        );
    }

    private void startEditAutoClose(Long chatId) {
        stateManager.setState(chatId, TeacherState.EDITING_AUTOCLOSE);

        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏?")
                .replyMarkup(keyboardBuilder.buildYesNoKeyboard())
                .build();

        botMessenger.execute(sendMessage);
    }

    private void processEditAutoClose(Long chatId, String answer) {
        Long consultationId = stateManager.getCurrentConsultationId(chatId);
        if (consultationId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", chatId);
            return;
        }

        consultationRepository.findById(consultationId).ifPresentOrElse(
                consultation -> {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    if (!isConsultationOwner(consultation, chatId)) {
                        botMessenger.sendText("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", chatId);
                        stateManager.setState(chatId, TeacherState.DEFAULT);
                        return;
                    }

                    boolean autoClose = answer.equals("–î–∞");
                    consultation.setAutoCloseOnCapacity(autoClose);
                    consultationRepository.save(consultation);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
//                    notificationService.notifyRegisteredStudentsUpdate(
//                            consultation,
//                            "–ò–∑–º–µ–Ω–µ–Ω–æ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ: " + (autoClose ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ")
//                    );

                    stateManager.setState(chatId, TeacherState.DEFAULT);
                    botMessenger.sendText(
                            "‚úÖ –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ " + (autoClose ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ"),
                            chatId
                    );
                    showConsultationDetails(chatId, consultationId);
                },
                () -> botMessenger.sendText("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", chatId)
        );
    }

    // ========== –†–∞–±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ==========

    private void showStudentRequests(Long chatId) {
        List<Consultation> requests = requestService.getAllRequests();

        String message = messageFormatter.formatRequestsList(requests);

        if (requests.isEmpty()) {
            botMessenger.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(message)
                    .replyMarkup(keyboardBuilder.buildMainMenu())
                    .build());
        } else {
            stateManager.clearCurrentRequest(chatId);  // –û—á–∏—â–∞–µ–º –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞
            stateManager.setState(chatId, TeacherState.VIEWING_REQUEST_DETAILS);
            botMessenger.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(message)
                    .replyMarkup(keyboardBuilder.buildRequestsList(requests))
                    .build());
        }
    }

    private void showRequestDetails(Long chatId, Long requestId) {
        requestService.findRequestById(requestId).ifPresentOrElse(
                request -> {
                    stateManager.setCurrentRequest(chatId, requestId);

                    int interestedCount = request.getRegUsers() != null
                            ? request.getRegUsers().size()
                            : 0;
                    String message = messageFormatter.formatRequestDetails(request, interestedCount);

                    botMessenger.execute(SendMessage.builder()
                            .chatId(chatId)
                            .text(message)
                            .replyMarkup(keyboardBuilder.buildRequestDetails(interestedCount))
                            .build());
                },
                () -> botMessenger.sendText("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", chatId)
        );
    }

    private void showRequestStudents(Long chatId, Long requestId) {
        requestService.findRequestById(requestId).ifPresentOrElse(
                request -> {
                    List<StudentConsultation> registrations = request.getRegUsers() != null
                            ? List.copyOf(request.getRegUsers())
                            : List.of();
                    String message = messageFormatter.formatRegisteredStudents(registrations);

                    botMessenger.execute(SendMessage.builder()
                            .chatId(chatId)
                            .text(message)
                            .replyMarkup(keyboardBuilder.buildBackKeyboard())
                            .build());
                },
                () -> botMessenger.sendText("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", chatId)
        );
    }

    private void startAcceptRequest(Long chatId) {
        Long requestId = stateManager.getCurrentRequest(chatId);
        if (requestId == null) {
            botMessenger.sendText("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω", chatId);
            return;
        }

        stateManager.setState(chatId, TeacherState.ACCEPTING_REQUEST_DATETIME);
        botMessenger.execute(SendMessage.builder()
                .chatId(chatId)
                .text("‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n" +
                        "–ù–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ —É–∫–∞–∑–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–º.\n\n" +
                        "–®–∞–≥ 1/3: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π\n\n" +
                        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú-–ß–ß:–ú–ú\n" +
                        "–ü—Ä–∏–º–µ—Ä—ã:\n" +
                        "‚Ä¢ 15.10.2025 14:00-16:00\n" +
                        "‚Ä¢ 20.10 10:00-12:00")
                .replyMarkup(keyboardBuilder.buildCancelKeyboard())
                .build());
    }

    private void processAcceptRequestDateTime(String input, Long chatId) {
        ParsedDateTime parsed = parseDateTimeInput(input);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
        if (!validateParsedDateTime(parsed, chatId)) {
            return;
        }

        stateManager.setTempDate(chatId, parsed.date.toString());
        stateManager.setTempStartTime(chatId, parsed.startTime.toString());
        stateManager.setTempEndTime(chatId, parsed.endTime.toString());
        stateManager.setState(chatId, TeacherState.ACCEPTING_REQUEST_CAPACITY);

        botMessenger.sendText(
                "‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n" +
                        "–®–∞–≥ 2/3: –í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n" +
                        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5)\n" +
                        "‚Ä¢ –ò–ª–∏ 0 –¥–ª—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
                chatId
        );
    }

    private void processAcceptRequestCapacity(String input, Long chatId) {
        Integer capacity = parseCapacity(input);

        stateManager.setTempCapacity(chatId, capacity);
        stateManager.setState(chatId, TeacherState.ACCEPTING_REQUEST_AUTOCLOSE);

        String capacityText = capacity == null ? "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" : String.valueOf(capacity);

        botMessenger.execute(SendMessage.builder()
                .chatId(chatId)
                .text("‚úÖ –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: " + capacityText + "\n\n" +
                        "–®–∞–≥ 3/3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞?")
                .replyMarkup(keyboardBuilder.buildYesNoKeyboard())
                .build());
    }

    private void processAcceptRequestAutoClose(String answer, Long chatId) {
        boolean autoClose = answer.equalsIgnoreCase("–î–∞");

        Long requestId = stateManager.getCurrentRequest(chatId);
        requestService.findRequestById(requestId).ifPresentOrElse(
                request -> {
                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    LocalDate date = LocalDate.parse(stateManager.getTempDate(chatId));
                    LocalTime startTime = LocalTime.parse(stateManager.getTempStartTime(chatId));
                    LocalTime endTime = LocalTime.parse(stateManager.getTempEndTime(chatId));
                    Integer capacity = stateManager.getTempCapacity(chatId);

                    TelegramUser teacher = getCurrentTeacher(chatId);

                    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å (–ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é)
                    Consultation consultation = consultationService.acceptRequest(
                            request, teacher, date, startTime, endTime, capacity, autoClose
                    );

                    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    stateManager.clearTempConsultationData(chatId);
                    stateManager.resetState(chatId);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                    notificationService.notifyInterestedStudentsRequestAccepted(consultation.getId());

                    botMessenger.execute(SendMessage.builder()
                            .chatId(chatId)
                            .text(String.format(
                                    "‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∏ –ø—Ä–µ–≤—Ä–∞—â—ë–Ω –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n" +
                                            "üìã –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Ññ%d\n" +
                                            "üìù %s\n" +
                                            "üìÖ %s %s-%s\n\n" +
                                            "–í—Å–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                                    consultation.getId(),
                                    consultation.getTitle(),
                                    date.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                                    startTime.format(TIME_FORMATTER),
                                    endTime.format(TIME_FORMATTER)
                            ))
                            .replyMarkup(keyboardBuilder.buildMainMenu())
                            .build());
                },
                () -> {
                    botMessenger.sendText("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", chatId);
                    stateManager.resetState(chatId);
                }
        );
    }

    // ========== –ù–∞–≤–∏–≥–∞—Ü–∏—è ==========

    private void backToList(Long chatId) {
        TeacherState currentState = stateManager.getState(chatId);

        if (currentState == TeacherState.VIEWING_REQUEST_DETAILS) {
            showStudentRequests(chatId);
        } else {
            showMyConsultations(chatId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚óÄÔ∏è –ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    private void handleBackButton(Long chatId) {
        TeacherState currentState = stateManager.getState(chatId);

        // –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (currentState == TeacherState.VIEWING_CONSULTATION_DETAILS) {
            Long consultationId = stateManager.getCurrentConsultationId(chatId);
            if (consultationId != null) {
                // –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                showConsultationDetails(chatId, consultationId);
                return;
            }
        }

        if (currentState == TeacherState.VIEWING_REQUEST_DETAILS) {
            Long requestId = stateManager.getCurrentRequest(chatId);
            if (requestId != null) {
                // –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–ø—Ä–æ—Å–∞
                showRequestDetails(chatId, requestId);
                return;
            }
        }

        // –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sendMainMenu(chatId);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" - –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private void handleCancel(Long chatId) {
        TeacherState currentState = stateManager.getState(chatId);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–º–µ–Ω—è–µ–º –∏ –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
        if (currentState == TeacherState.WAITING_FOR_CONSULTATION_TITLE
                || currentState == TeacherState.WAITING_FOR_CONSULTATION_DATETIME
                || currentState == TeacherState.WAITING_FOR_CONSULTATION_CAPACITY
                || currentState == TeacherState.WAITING_FOR_CONSULTATION_AUTOCLOSE) {
            // 1) –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            stateManager.clearTempConsultationData(chatId);
            stateManager.resetState(chatId);

            botMessenger.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    .replyMarkup(keyboardBuilder.buildMainMenu())
                    .build());

        } else if (currentState == TeacherState.EDITING_TITLE
                || currentState == TeacherState.EDITING_DATETIME
                || currentState == TeacherState.EDITING_CAPACITY
                || currentState == TeacherState.EDITING_AUTOCLOSE) {
            // 2) –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            Long consultationId = stateManager.getCurrentConsultationId(chatId);
            stateManager.clearTempConsultationData(chatId);
            stateManager.resetState(chatId);

            botMessenger.sendText("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", chatId);

            if (consultationId != null) {
                showConsultationDetails(chatId, consultationId);
            } else {
                sendMainMenu(chatId);
            }

        } else if (currentState == TeacherState.ACCEPTING_REQUEST_DATETIME
                || currentState == TeacherState.ACCEPTING_REQUEST_CAPACITY
                || currentState == TeacherState.ACCEPTING_REQUEST_AUTOCLOSE) {
            // 3) –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ - –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–ø—Ä–æ—Å–∞
            Long requestId = stateManager.getCurrentRequest(chatId);
            stateManager.clearTempConsultationData(chatId);
            stateManager.resetState(chatId);

            botMessenger.sendText("‚ùå –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", chatId);

            if (requestId != null) {
                showRequestDetails(chatId, requestId);
            } else {
                sendMainMenu(chatId);
            }

        } else {
            // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            stateManager.clearTempConsultationData(chatId);
            stateManager.resetState(chatId);

            botMessenger.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    .replyMarkup(keyboardBuilder.buildMainMenu())
                    .build());
        }
    }

    // ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ==========

    private TelegramUser getCurrentTeacher(Long chatId) {
        return telegramUserRepository.findByTelegramId(chatId).orElseThrow();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
     *
     * @return true –µ—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
     */
    private boolean isConsultationOwner(Consultation consultation, Long chatId) {
        TelegramUser currentTeacher = getCurrentTeacher(chatId);
        return consultation.getTeacher() != null &&
                consultation.getTeacher().getId().equals(currentTeacher.getId());
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
     * - 15.10.2025 14:00-16:00
     * - 15.10 14:00-16:00
     */
    private ParsedDateTime parseDateTimeInput(String input) {
        try {
            String[] parts = input.trim().split("\\s+");
            if (parts.length != 2) {
                return ParsedDateTime.invalid();
            }

            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            LocalDate date = parseDate(parts[0]);
            if (date == null) {
                return ParsedDateTime.invalid();
            }

            // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            String[] timeParts = parts[1].split("-");
            if (timeParts.length != 2) {
                return ParsedDateTime.invalid();
            }

            LocalTime startTime = LocalTime.parse(timeParts[0].trim(), TIME_FORMATTER);
            LocalTime endTime = LocalTime.parse(timeParts[1].trim(), TIME_FORMATTER);

            return new ParsedDateTime(date, startTime, endTime, true);
        } catch (DateTimeParseException e) {
            return ParsedDateTime.invalid();
        }
    }

    private LocalDate parseDate(String dateStr) {
        // –ü—Ä–æ–±—É–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å –ø–∞—Ä—Å–µ—Ä–æ–º
        for (DateTimeFormatter formatter : DATE_FORMATTERS) {
            try {
                return LocalDate.parse(dateStr, formatter);
            } catch (DateTimeParseException ignored) {
            }
        }

        // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à—ë–ª, –ø—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é –ø–∞—Ä—Å–∏—Ç—å dd.MM (–±–µ–∑ –≥–æ–¥–∞)
        String[] parts = dateStr.split("\\.");
        if (parts.length == 2) {
            try {
                int day = Integer.parseInt(parts[0]);
                int month = Integer.parseInt(parts[1]);
                int year = LocalDate.now().getYear();

                // –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É —Å —Ç–µ–∫—É—â–∏–º –≥–æ–¥–æ–º
                return LocalDate.of(year, month, day);
            } catch (Exception ignored) {
            }
        }

        return null;
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (0 –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = null)
     */
    private Integer parseCapacity(String input) {
        try {
            int value = Integer.parseInt(input.trim());
            return value > 0 ? value : null;
        } catch (NumberFormatException e) {
            return null;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è ParsedDateTime —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
     *
     * @return true –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
     */
    private boolean validateParsedDateTime(ParsedDateTime parsed, Long chatId) {
        if (!parsed.isValid()) {
            botMessenger.sendText(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n" +
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú-–ß–ß:–ú–ú\n" +
                            "–ü—Ä–∏–º–µ—Ä—ã:\n" +
                            "‚Ä¢ 15.10.2025 14:00-16:00\n" +
                            "‚Ä¢ 20.10 10:00-12:00\n\n" +
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                    chatId
            );
            return false;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
        if (!parsed.endTime.isAfter(parsed.startTime)) {
            botMessenger.sendText(
                    "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!\n" +
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                    chatId
            );
            return false;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º
        if (parsed.date.atTime(parsed.startTime).isBefore(java.time.LocalDateTime.now())) {
            botMessenger.sendText(
                    "‚ùå –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!\n" +
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                    chatId
            );
            return false;
        }

        return true;
    }

    // ========== Record –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ==========

    private record ParsedDateTime(LocalDate date, LocalTime startTime, LocalTime endTime, boolean valid) {
        public boolean isValid() {
            return valid;
        }

        public static ParsedDateTime invalid() {
            return new ParsedDateTime(null, null, null, false);
        }
    }
}

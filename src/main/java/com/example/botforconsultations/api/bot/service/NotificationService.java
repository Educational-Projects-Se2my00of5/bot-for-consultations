package com.example.botforconsultations.api.bot.service;

import com.example.botforconsultations.api.bot.BotMessenger;
import com.example.botforconsultations.api.bot.utils.TeacherMessageFormatter;
import com.example.botforconsultations.core.model.Consultation;
import com.example.botforconsultations.core.model.StudentConsultation;
import com.example.botforconsultations.core.model.Subscription;
import com.example.botforconsultations.core.model.TelegramUser;
import com.example.botforconsultations.core.repository.SubscriptionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class NotificationService {

    private final BotMessenger botMessenger;
    private final SubscriptionRepository subscriptionRepository;
    private final TeacherMessageFormatter messageFormatter;
    private final ConsultationService consultationService;

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
     */
    public void notifySubscribersNewConsultation(Long consultationId) {
        Consultation consultation = consultationService.findById(consultationId);
        List<Subscription> subscriptions = subscriptionRepository.findByTeacher(consultation.getTeacher());
        
        if (subscriptions.isEmpty()) {
            log.debug("No subscribers for teacher #{}", consultation.getTeacher().getId());
            return;
        }

        String message = messageFormatter.formatNewConsultationNotification(consultation);
        
        int sent = 0;
        for (Subscription subscription : subscriptions) {
            Long chatId = subscription.getStudent().getTelegramId();
            try {
                botMessenger.sendText(message, chatId);
                sent++;
            } catch (Exception e) {
                log.error("Failed to send notification to student #{}: {}", 
                        subscription.getStudent().getId(), e.getMessage());
            }
        }

        log.info("Sent {} notifications about new consultation #{}", sent, consultation.getId());
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
     */
    public void notifyRegisteredStudentsUpdate(Long consultationId, String changeDescription) {
        Consultation consultation = consultationService.findById(consultationId);
        List<StudentConsultation> registrations = consultation.getRegUsers() != null
                ? List.copyOf(consultation.getRegUsers())
                : List.of();
        
        if (registrations.isEmpty()) {
            log.debug("No registered students for consultation #{}", consultation.getId());
            return;
        }

        String message = messageFormatter.formatConsultationUpdateNotification(consultation, changeDescription);
        
        int sent = 0;
        for (StudentConsultation sc : registrations) {
            Long chatId = sc.getStudent().getTelegramId();
            try {
                botMessenger.sendText(message, chatId);
                sent++;
            } catch (Exception e) {
                log.error("Failed to send update notification to student #{}: {}", 
                        sc.getStudent().getId(), e.getMessage());
            }
        }

        log.info("Sent {} update notifications for consultation #{}", sent, consultation.getId());
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –Ω–æ –ù–ï –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
     */
    public void notifySubscribersAvailableSpots(Long consultationId, Long excludeStudentId) {
        Consultation consultation = consultationService.findById(consultationId);
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        List<Subscription> subscriptions = subscriptionRepository.findByTeacher(consultation.getTeacher());
        
        if (subscriptions.isEmpty()) {
            log.debug("No subscribers for teacher #{}", consultation.getTeacher().getId());
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        List<StudentConsultation> registrations = consultation.getRegUsers() != null
                ? List.copyOf(consultation.getRegUsers())
                : List.of();
        Set<Long> registeredStudentIds = registrations.stream()
                .map(sc -> sc.getStudent().getId())
                .collect(Collectors.toSet());

        // –§–∏–ª—å—Ç—Ä—É–µ–º: —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ (–∏ –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç)
        List<TelegramUser> studentsToNotify = subscriptions.stream()
                .map(Subscription::getStudent)
                .filter(student -> !registeredStudentIds.contains(student.getId()))
                .filter(student -> !student.getId().equals(excludeStudentId))
                .toList();

        if (studentsToNotify.isEmpty()) {
            log.debug("No students to notify about available spots for consultation #{}", consultation.getId());
            return;
        }

        long currentCount = registrations.size();
        String message = messageFormatter.formatAvailableSpotsNotification(consultation, currentCount);
        
        int sent = 0;
        for (TelegramUser student : studentsToNotify) {
            Long chatId = student.getTelegramId();
            try {
                botMessenger.sendText(message, chatId);
                sent++;
            } catch (Exception e) {
                log.error("Failed to send available spots notification to student #{}: {}", 
                        student.getId(), e.getMessage());
            }
        }

        log.info("Sent {} available spots notifications for consultation #{}", sent, consultation.getId());
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
     */
    public void notifyRegisteredStudentsCancellation(Long consultationId) {
        Consultation consultation = consultationService.findById(consultationId);
        List<StudentConsultation> registrations = consultation.getRegUsers() != null
                ? List.copyOf(consultation.getRegUsers())
                : List.of();
        
        if (registrations.isEmpty()) {
            log.debug("No registered students for consultation #{}", consultation.getId());
            return;
        }

        String message = messageFormatter.formatCancellationNotification(consultation);
        
        int sent = 0;
        for (StudentConsultation sc : registrations) {
            Long chatId = sc.getStudent().getTelegramId();
            try {
                botMessenger.sendText(message, chatId);
                sent++;
            } catch (Exception e) {
                log.error("Failed to send cancellation notification to student #{}: {}", 
                        sc.getStudent().getId(), e.getMessage());
            }
        }

        log.info("Sent {} cancellation notifications for consultation #{}", sent, consultation.getId());
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
     */
    public void notifyInterestedStudentsRequestAccepted(Long consultationId) {
        Consultation consultation = consultationService.findById(consultationId);
        List<StudentConsultation> registrations = consultation.getRegUsers() != null
                ? List.copyOf(consultation.getRegUsers())
                : List.of();
        
        if (registrations.isEmpty()) {
            log.debug("No interested students for consultation #{}", consultation.getId());
            return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        String message = messageFormatter.formatNewConsultationNotification(consultation);
        String header = "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º!\n\n";
        message = header + message;
        
        int sent = 0;
        for (StudentConsultation sc : registrations) {
            Long chatId = sc.getStudent().getTelegramId();
            try {
                botMessenger.sendText(message, chatId);
                sent++;
            } catch (Exception e) {
                log.error("Failed to send request accepted notification to student #{}: {}", 
                        sc.getStudent().getId(), e.getMessage());
            }
        }

        log.info("Sent {} request accepted notifications for consultation #{}", sent, consultation.getId());
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
     * @param chatId Telegram ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
     */
    public void notifyTeacherAccountApproved(Long chatId) {
        String message = """
                ‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!
                
                –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
                üìÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
                üë• –£–ø—Ä–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–∞—Ü–∏–∏
                
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
                """;
        
        try {
            botMessenger.sendText(message, chatId);
            log.info("Sent account approval notification to teacher with chatId #{}", chatId);
        } catch (Exception e) {
            log.error("Failed to send account approval notification to teacher #{}: {}", 
                    chatId, e.getMessage());
        }
    }
}

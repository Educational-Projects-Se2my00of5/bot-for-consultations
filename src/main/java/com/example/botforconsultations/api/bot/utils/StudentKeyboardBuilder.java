package com.example.botforconsultations.api.bot.utils;

import com.example.botforconsultations.core.model.Consultation;
import com.example.botforconsultations.core.model.ConsultationStatus;
import com.example.botforconsultations.core.model.TelegramUser;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞
 */
@Component
public class StudentKeyboardBuilder {

    private static final DateTimeFormatter BUTTON_DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM");
    private static final DateTimeFormatter BUTTON_TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm");

    /**
     * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞
     */
    public ReplyKeyboardMarkup buildMainMenu() {
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row1 = new KeyboardRow();
        KeyboardRow row2 = new KeyboardRow();
        KeyboardRow row3 = new KeyboardRow();
        KeyboardRow row4 = new KeyboardRow();

        row1.add(new KeyboardButton("üîç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"));
        row2.add(new KeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"));
        row2.add(new KeyboardButton("üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏"));
        row3.add(new KeyboardButton("‚ùì –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"));
        row3.add(new KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã"));
        row4.add(new KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"));
        row4.add(new KeyboardButton("–ü–æ–º–æ—â—å"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        keyboard.add(row4);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ú–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
     */
    public ReplyKeyboardMarkup buildTeachersMenu() {
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üë• –í—Å–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"));
        row1.add(new KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"));
        keyboard.add(row1);

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
     */
    public ReplyKeyboardMarkup buildTeacherSearchResults(List<TelegramUser> teachers) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã—Ö 5 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –∫–Ω–æ–ø–∫–∏
        int count = 0;
        for (TelegramUser teacher : teachers) {
            if (count >= 5) break;

            KeyboardRow row = new KeyboardRow();
            row.add(new KeyboardButton(TeacherNameFormatter.formatFullName(teacher)));
            keyboard.add(row);
            count++;
        }

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        KeyboardRow searchRow = new KeyboardRow();
        searchRow.add(new KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"));
        keyboard.add(searchRow);

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("üîô –ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
     */
    public ReplyKeyboardMarkup buildTeacherConsultations(
            List<Consultation> consultations,
            boolean isSubscribed) {

        List<KeyboardRow> keyboard = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
        int count = 0;
        for (Consultation consultation : consultations) {
            if (count >= 5) break;
            KeyboardRow row = new KeyboardRow();
            row.add(new KeyboardButton(String.format("‚Ññ%d - %s %s",
                    consultation.getId(),
                    consultation.getDate().format(BUTTON_DATE_FORMATTER),
                    consultation.getStartTime().format(BUTTON_TIME_FORMATTER))));
            keyboard.add(row);
            count++;
        }

        // –§–∏–ª—å—Ç—Ä—ã
        KeyboardRow filterRow = new KeyboardRow();
        filterRow.add(new KeyboardButton("‚è≠Ô∏è –ë—É–¥—É—â–∏–µ"));
        filterRow.add(new KeyboardButton("üìÖ –í—Å–µ"));
        filterRow.add(new KeyboardButton("‚èÆÔ∏è –ü—Ä–æ—à–µ–¥—à–∏–µ"));
        keyboard.add(filterRow);

        // –ü–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞
        KeyboardRow actionRow = new KeyboardRow();
        if (isSubscribed) {
            actionRow.add(new KeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"));
        } else {
            actionRow.add(new KeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"));
        }
        keyboard.add(actionRow);

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        KeyboardRow navRow = new KeyboardRow();
        navRow.add(new KeyboardButton("üîô –ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º"));
        navRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(navRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
     *
     * @param consultation –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
     * @param isRegistered –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç
     */
    public ReplyKeyboardMarkup buildConsultationDetails(Consultation consultation, boolean isRegistered) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏/–æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è Open
        if (consultation.getStatus().equals(ConsultationStatus.OPEN)) {
            KeyboardRow actionRow = new KeyboardRow();
            if (isRegistered) {
                actionRow.add(new KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"));
            } else {
                actionRow.add(new KeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"));
            }
            keyboard.add(actionRow);
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏/–æ—Ç–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ Closed
        if (consultation.getStatus().equals(ConsultationStatus.CLOSED)) {
            KeyboardRow actionRow = new KeyboardRow();
            if (isRegistered) {
                actionRow.add(new KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"));
                keyboard.add(actionRow);
            }
        }

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public ReplyKeyboardMarkup buildRequestsList(List<Consultation> requests) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 10)
        int count = 0;
        for (Consultation request : requests) {
            if (count >= 10) break;
            KeyboardRow row = new KeyboardRow();
            row.add(new KeyboardButton(String.format("‚Ññ%d - %s",
                    request.getId(),
                    request.getTitle().length() > 30
                            ? request.getTitle().substring(0, 30) + "..."
                            : request.getTitle())));
            keyboard.add(row);
            count++;
        }

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
     *
     * @param isRegistered –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
     */
    public ReplyKeyboardMarkup buildRequestDetails(boolean isRegistered) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow actionRow = new KeyboardRow();
        if (isRegistered) {
            actionRow.add(new KeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∑–∞–ø—Ä–æ—Å–∞"));
        } else {
            actionRow.add(new KeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–ø—Ä–æ—Å"));
        }
        keyboard.add(actionRow);

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞)
     */
    public ReplyKeyboardMarkup buildBackKeyboard() {
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }
}

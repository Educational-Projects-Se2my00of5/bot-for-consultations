package com.example.botforconsultations.api.bot.utils;

import com.example.botforconsultations.core.model.Consultation;
import com.example.botforconsultations.core.model.ConsultationStatus;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
 */
@Component
public class TeacherKeyboardBuilder {

    private static final DateTimeFormatter BUTTON_DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM");
    private static final DateTimeFormatter BUTTON_TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm");

    /**
     * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
     */
    public ReplyKeyboardMarkup buildMainMenu() {
        List<KeyboardRow> keyboard = new ArrayList<>();
        
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üìÖ –ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"));
        row1.add(new KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"));
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã"));
        keyboard.add(row2);

        KeyboardRow helpRow = new KeyboardRow();
        helpRow.add(new KeyboardButton("–ü–æ–º–æ—â—å"));
        keyboard.add(helpRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
     */
    public ReplyKeyboardMarkup buildConsultationsList(List<Consultation> consultations) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5)
        int count = 0;
        for (Consultation consultation : consultations) {
            if (count >= 5) break;
            
            KeyboardRow row = new KeyboardRow();
            // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            String buttonText = String.format("‚Ññ%d - %s %s", 
                    consultation.getId(),
                    consultation.getDate().format(BUTTON_DATE_FORMATTER),
                    consultation.getStartTime().format(BUTTON_TIME_FORMATTER));
            
            row.add(new KeyboardButton(buttonText));
            keyboard.add(row);
            count++;
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
     * @param consultation –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
     * @param registeredCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
     */
    public ReplyKeyboardMarkup buildConsultationDetails(Consultation consultation, long registeredCount) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        ConsultationStatus status = consultation.getStatus();

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if (status == ConsultationStatus.OPEN) {
            KeyboardRow row1 = new KeyboardRow();
            row1.add(new KeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å"));
            keyboard.add(row1);
            
            KeyboardRow row2 = new KeyboardRow();
            row2.add(new KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"));
            row2.add(new KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"));
            keyboard.add(row2);
            
        } else if (status == ConsultationStatus.CLOSED) {
            KeyboardRow row1 = new KeyboardRow();
            row1.add(new KeyboardButton("üîì –û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å"));
            keyboard.add(row1);
            
            KeyboardRow row2 = new KeyboardRow();
            row2.add(new KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"));
            row2.add(new KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"));
            keyboard.add(row2);
        }
        // –î–ª—è CANCELLED —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤" (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ)
        if (registeredCount > 0) {
            KeyboardRow studentsRow = new KeyboardRow();
            studentsRow.add(new KeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"));
            keyboard.add(studentsRow);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
     */
    public ReplyKeyboardMarkup buildConsultationDetailsReadOnly(long registeredCount) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤" (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ)
        if (registeredCount > 0) {
            KeyboardRow studentsRow = new KeyboardRow();
            studentsRow.add(new KeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"));
            keyboard.add(studentsRow);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
     */
    public ReplyKeyboardMarkup buildRequestsList(List<Consultation> requests) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5)
        int count = 0;
        for (Consultation request : requests) {
            if (count >= 5) break;
            
            KeyboardRow row = new KeyboardRow();
            String buttonText = String.format("‚Ññ%d - %s", 
                    request.getId(), 
                    request.getTitle().length() > 30 
                        ? request.getTitle().substring(0, 30) + "..." 
                        : request.getTitle());
            row.add(new KeyboardButton(buttonText));
            keyboard.add(row);
            count++;
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
     * @param interestedCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
     */
    public ReplyKeyboardMarkup buildRequestDetails(int interestedCount) {
        List<KeyboardRow> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å" (—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é)
        KeyboardRow acceptRow = new KeyboardRow();
        acceptRow.add(new KeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å"));
        keyboard.add(acceptRow);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if (interestedCount > 0) {
            KeyboardRow studentsRow = new KeyboardRow();
            studentsRow.add(new KeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"));
            keyboard.add(studentsRow);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è (–î–∞/–ù–µ—Ç)
     */
    public ReplyKeyboardMarkup buildYesNoKeyboard() {
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("–î–∞"));
        row.add(new KeyboardButton("–ù–µ—Ç"));
        keyboard.add(row);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public ReplyKeyboardMarkup buildEditMenu() {
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üìã –ù–∞–∑–≤–∞–Ω–∏–µ"));
        row1.add(new KeyboardButton("üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"));
        keyboard.add(row1);

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"));
        row2.add(new KeyboardButton("üîí –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ"));
        keyboard.add(row2);

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
     */
    public ReplyKeyboardMarkup buildBackKeyboard() {
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow backRow = new KeyboardRow();
        backRow.add(new KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"));
        keyboard.add(backRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞" –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public ReplyKeyboardMarkup buildCancelKeyboard() {
        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow cancelRow = new KeyboardRow();
        cancelRow.add(new KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"));
        keyboard.add(cancelRow);

        return ReplyKeyboardMarkup.builder()
                .keyboard(keyboard)
                .resizeKeyboard(true)
                .build();
    }
}
